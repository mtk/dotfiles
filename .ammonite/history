[
    "val v = 100",
    "val s = \"hi\"",
    "v  + s",
    "def f(x: Int) = x * 2",
    "f(3)",
    "val v = \"Hi there.\"",
    "v.intern",
    "v",
    "v",
    "val v = \"hi there\"",
    "v.permutations",
    "res1.hasNext",
    "res1.next.hasNext",
    "val v = \"hi\"",
    "val j = 3",
    "val x = 3.14159",
    "j + v + x",
    "10 to 1",
    "10 to (1, -1)",
    "1 to 10",
    "1 to (10, -1)",
    "(10, -1) to 1",
    "val v = 100",
    "val j = \"hi smith\"",
    "enum Foo: a,b,c",
    "enum Foo { a,b,c }",
    "def foo: Unit =\n  println(\"one\")\n  println(\"two\")\n",
    "foo",
    "given x: Int = 5",
    "def foo(s: String)(i: Int) = println(\"s is <\" + s \"> and i is <\" + i + \">\")",
    "def foo(s: String)(i: Int) = println(\"s is <\" + s + \"> and i is <\" + i + \">\")",
    "foo(\"hi\")",
    "res2(3)",
    "def foo(s: String)(using i: Int) = println(\"s is <\" + s + \"> and i is <\" + i + \">\")",
    "foo(\"maybe now\")",
    "val s = \"hi\\nthere\"",
    "val s1 = raw\"hi\\nthere\"",
    "val s = \"hi\\tthere\"",
    "val s = s\"hi\\tthere\"",
    "val s = s\"hi\\rthere\"",
    "val s = \"hi\\rthere\"",
    "val s = \"hithere\"",
    "val s = \"hi\\hthere\"",
    "val s = \"hi \\t there\"",
    "s",
    "val s = \"foo\\tbar\"",
    "s",
    "s.length",
    "s.drop(4)",
    "print(s)",
    "val r = for c <- \"hi there row fox\" do println(c)",
    "r",
    ":type r",
    "?",
    "r.type",
    "help",
    ":help",
    "-h",
    "?",
    "()",
    "val r = ()",
    "r",
    "def f(s: String): Option[Int] = \n  try\n    Some(s.toInt)\n  catch\n    case _: NumberFormatException => None\n",
    "f(5)",
    "f(\"5\")",
    "f(\"one\")",
    "def f(x: Int*) = x foreach println",
    "f(1,3,5)",
    "f(Seq(1,2,9))",
    "f(Seq(1,2,9): _*)",
    "import java.util.{Currency,Locale}",
    "c = Currency.getInstance(Locale.Germany)",
    "val c = Currency.getInstance(Locale.Germany)",
    "val c = Currency.getInstance(Locale.GERMANY)",
    "val f = java.text.NumberFormat.getCurrencyInstance",
    "f.setCurrency(c)",
    "f.format(1_234_555.33)",
    "print(res10)",
    "given i: Int = 5",
    "i",
    "def f(c: Char)(i: Int) = println(s\"c is <$c> and i is <$i>\")",
    "f('a')",
    "res3(3)",
    "def f(c: Char)(using i: Int) = println(s\"c is <$c> and i is <$i>\")",
    "f('a')",
    "1.asInstanceOf[1]",
    "val v = 2",
    "v.asInstanceOf[Int]",
    "v.asInstanceOf[String]",
    "v.asInstanceOf[Long]",
    "v.asInstanceOf[Double]",
    "1.isInstanceOf[Int]",
    "1.isInstanceOf[Double]",
    "class A",
    "class B extends A",
    "class C extends B",
    "A",
    "A()",
    "A().isInstanceOf[A]",
    "A().isInstanceOf[B]",
    "B().isInstanceOf[A]",
    "val l = List(1,2,3)",
    "val l\n\nl",
    "l",
    "l",
    "res1 == res2",
    "val nl = 5 +: l",
    "n1 == l",
    "n1",
    "nl",
    "nl == l",
    "nl == l.tail",
    "l == nl.tail",
    "val l = List(List(1,2),List(3,4,5),List(8,8,8,8.8))",
    "l(2)",
    "l.inits",
    "l.inits.foreach(println)",
    "l",
    "Integer.parseInt(\"12\")",
    "Integer.parseInt(\"twelve\")",
    "Try(Integer.parseInt(\"twelve\"))",
    "Try(5)",
    "import util.Try",
    "import scala.util.Try",
    "Try(Integer.parseInt(\"twelve\"))",
    "res17.toOption",
    "1 :* \"hi\"",
    "1 :* \"hi\" :* EmptyTuple",
    "1 *: \"hi\" *: EmptyTuple",
    "1 *: \"hi\" *: EmptyTuple *: EmptyTuple",
    "val s = \"a string\"",
    "s.split(\" \")",
    "val s = \"how now\"",
    "s(3) = \"<KABOOM>\"",
    "var s = \"how now\"",
    "s(3) = \"<KABOOM>\"",
    "ff scala*elz",
    "val s = \"ls\"",
    "s.!!",
    "import scala.sys.process.*",
    "import scala.sys.process",
    "s.!!",
    "\"ls\".!!",
    "import sys.process.*",
    "import sys.process._",
    "\"ls\".!!",
    "\"l1\".!",
    "\"ls\".!",
    "Source.fromFile(\"/etc/passwd\")",
    "import io.Source",
    "import io.Source._",
    "import scala.io.Source",
    "import scala.io.Source._",
    "Source.fromFile(\"/etc/passwd\")",
    "Source.fromFile(\"/etc/passwd\").getLines",
    "Source.fromFile(\"/etc/passwd\").getLines.toList",
    "Source.fromFile(\"/etc/passwd\").getLines.mkString",
    "Source.fromFile(\"/etc/passwd\").mkString",
    "1 to 30",
    "\"hi there\".head",
    "val v = 1235454",
    "v",
    "res1",
    "res1 / 0",
    "val v = 100",
    "val j = 200",
    "v + j",
    "\"foo bar\".split(\" \")"
]